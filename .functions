#!/bin/bash


# /*!
# @function updots
# @brief Update all my dotfiles to match the repo
# */
function updots() {
    cd ~/Code/libs/dotfiles-project/dotfiles/
    set -- -f; source bootstrap.sh
}

# /*!
# @function f
# @brief find shorthand
# */
function f() {
    find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# /*!
# @function la
# @brief List all files
# @description List all files, long format, colorized, permissions in octal
# */
function la(){
    ls -l  "$@" | awk '
    {
      k=0;
      for (i=0;i<=8;i++)
        k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
      if (k)
        printf("%0o ",k);
      printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
    }'
}


# /*!
# @function calc
# @brief Simple calculator
# */
function calc() {
    local result="";
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
    #                       â””â”€ default (when `--mathlib` is used) is 20
    #
    if [[ "$result" == *.* ]]; then
        # improve the output for decimal numbers
        printf "$result" |
        sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
            -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
            -e 's/0*$//;s/\.$//';  # remove trailing zeros
    else
        printf "$result";
    fi;
    printf "\n";
}

# /*!
# @function mkd
# @brief Create a new directory and enter it.
# */
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# /*!
# @brief Change working directory to the top-most Finder window location
# */
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# /*!
# @function camerausedby
# @brief Who is using the laptop's iSight camera?
# */
camerausedby() {
    echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
    usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
    echo -e "Recent camera uses:\n$usedby"
}

# /*!
# @brief Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
# */
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar using \`${cmd}\`â€¦";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";
    echo "${tmpFile}.gz created successfully.";
}

# /*!
# @brief Determine size of a file or total size of a directory
# */
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* *;
    fi;
}

# /*!
# @brief git log with per-commit cmd-clickable GitHub URLs (iTerm)
# */
function gf() {
  local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
  [[ "$remote" ]] || return
  local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
  git log $* --name-status --color | awk "$(cat <<AWK
    /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
    /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
    /.*/ {print \$0}
AWK
  )" | less -F
}


# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

# /*!
# @brief Create a data URL from a file
# */
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# /*!
# @brief Create a git.io short URL
# */
function gitio() {
    if [ -z "${1}" -o -z "${2}" ]; then
        echo "Usage: \`gitio slug url\`";
        return 1;
    fi;
    curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# /*!
# @brief Start an HTTP server from a directory, optionally specifying the port
# */
function server() {
    local port="${1:-8000}";
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# /*!
# @brief Start a PHP server from a directory, optionally specifying the port
# @dependency (Requires PHP 5.4.0+.)
# */
function phpserver() {
    local port="${1:-4000}";
    local ip=$(ipconfig getifaddr en1);
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}";
}

# /*!
# @brief Compare original and gzipped file size
# */
function gz() {
    local origsize=$(wc -c < "$1");
    local gzipsize=$(gzip -c "$1" | wc -c);
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# /*!
# @brief Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
# */
function json() {
    if [ -p /dev/stdin ]; then
        # piping, e.g. `echo '{"foo":42}' | json`
        python -mjson.tool | pygmentize -l javascript
    else
        # e.g. `json '{"foo":42}'`
        python -mjson.tool <<< "$*" | pygmentize -l javascript
    fi
}

# /*!
# @brief Run `dig` and display the most useful info
# */
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

# /*!
# @brief UTF-8-encode a string of Unicode symbols
# */
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
    # print a newline unless weâ€™re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# /*!
# @brief Decode \x{ABCD}-style Unicode escape sequences
# */
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
    # print a newline unless weâ€™re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# /*!
# @brief Get a characterâ€™s Unicode code point
# */
function codepoint() {
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
    # print a newline unless weâ€™re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

# /*!
# @brief Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
# */
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}â€¦";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# /*!
# @brief Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# @discussion Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
# */
function httpcompression() {
    encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# /*!
# @brief `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
# */
function s() {
    if [ $# -eq 0 ]; then
        subl .;
    else
        subl "$@";
    fi;
}

# /*!
# @brief `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
# */
function a() {
    if [ $# -eq 0 ]; then
        atom .;
    else
        atom "$@";
    fi;
}

# /*!
# @brief `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
# */
function v() {
    if [ $# -eq 0 ]; then
        vim .;
    else
        vim "$@";
    fi;
}

# /*!
# @brief Eliminates a file from git history. Returns an error message when no
# arguments are given.
# */
function gitvanish() {
    if [ $# -eq 0 ]; then
        echo You didn't specify a file. Try again;
    else
        git filter-branch --force --index-filter \
        'git rm --cached --ignore-unmatch "$@"' \
        --prune-empty --tag-name-filter cat -- --all';
    fi;
}

# /*!
# @brief `o` with no arguments opens the current directory, otherwise opens the given
# location
# */
function o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}

# /*!
# @brief `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
# */
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# /*!
# @brief Extract archives - use: extract <file>
# @discussion Based on http://dotfiles.org/~pseup/.bashrc
# */
function extract() {
    if [ -f "$1" ] ; then
        local filename=$(basename "$1")
        local foldername="${filename%%.*}"
        local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
        local didfolderexist=false
        if [ -d "$foldername" ]; then
            didfolderexist=true
            read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
            echo
            if [[ $REPLY =~ ^[Nn]$ ]]; then
                return
            fi
        fi
        mkdir -p "$foldername" && cd "$foldername"
        case $1 in
            *.tar.bz2) tar xjf "$fullpath" ;;
            *.tar.gz) tar xzf "$fullpath" ;;
            *.tar.xz) tar Jxvf "$fullpath" ;;
            *.tar.Z) tar xzf "$fullpath" ;;
            *.tar) tar xf "$fullpath" ;;
            *.taz) tar xzf "$fullpath" ;;
            *.tb2) tar xjf "$fullpath" ;;
            *.tbz) tar xjf "$fullpath" ;;
            *.tbz2) tar xjf "$fullpath" ;;
            *.tgz) tar xzf "$fullpath" ;;
            *.txz) tar Jxvf "$fullpath" ;;
            *.zip) unzip "$fullpath" ;;
            *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# /*!
# @brief Improved whois function
# @discussion whois a domain or a url
# */
#function whois() {
#    local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
#    if [ -z $domain ] ; then
#        domain=$1
#    fi
#    echo "Getting whois record for: $domain â€¦"
#
#    # avoid recursion
#                    # this is the best whois server
#                                                    # strip extra fluff
#    /usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
#}

# /*!
# @brief LocalIP Function
# @discussion Gets information about local IP and hardware
# */
function localip(){
    function _localip(){ echo "ðŸ“¶  "$(ipconfig getifaddr "$1"); }
    export -f _localip
    local purple="\x1B\[35m" reset="\x1B\[m"
    networksetup -listallhardwareports | \
        sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
        sed -r "s/Device: (en.*)$/_localip \1/e" | \
        sed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
        sed -r "s/(VLAN Configurations)|==*//g"
}

# /*!
# @brief Print a horizontal rule
# */
rule () {
    printf "%$(tput cols)s\n"|tr " " "â”€"}}
}


# `shellswitch [bash |zsh]`
#   Must be in /etc/shells
shellswitch () {
    chsh -s $(brew --prefix)/bin/$1
}

# /*!
# @brief Git Commit Browser
# @discussion Git Commit Browser, Requires fzf
# */
log() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
      --bind "ctrl-m:execute:
                echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R'"
}


