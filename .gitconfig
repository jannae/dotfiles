[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # View the current working tree status using the short format
    s = status -s

    # a little shorthand
    c = commit -am
    up = pull
    p = push

    # alias to do a shallow clone. more speed, less space. boom
    sclone = clone --depth=1

    # Commit all changes
    ca = !git add -A && git commit -av

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Diff with color
    df = diff --color --color-words --abbrev

    # Git Log pretty
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --

    # I don't even know how I didn't already have this
    co = checkout

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore_global
    attributesfile = ~/.gitattributes

    # insanely beautiful diffs
    pager = diff-highlight | diff-so-fancy | less -r

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    editor = subl -n -w
    filemode = false
    autocrlf = input

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
    ui = always

[color "diff"]
    meta = yellow bold
    commit = green bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions
    whitespace = red reverse

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = "red bold 52"
    newNormal = "green bold"
    newHighlight = "green bold 22"

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
    tool = opendiff

[push]
    # push easily. http://stackoverflow.com/a/23918418/89484
    default = current
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f

# URL shorthands

[url "git@github.com:"]
    insteadOf = "gh:"
    insteadOf = "git://github.com"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
    pushInsteadOf = "https://github.com/"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
    pushInsteadOf = "https://gist.github.com/"

# correct typos
[help]
    autocorrect = 1

# push easily. http://stackoverflow.com/a/23918418/89484
[push]
    default = current

# use separate file for username / github token / etc
[include]
    path = ~/.gitconfig.local

[init]
    templatedir = ~/.git_template
